{"version":3,"sources":["assets/strava.svg","App.tsx","index.tsx"],"names":["syncLink","process","baseColumns","id","Header","accessor","prColumns","Cell","props","date","Date","setSeconds","cell","value","toISOString","substr","effortsColumns","StravaButton","className","src","stravaLogo","alt","Table","useTable","columns","data","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","state","pageIndex","pageSize","gotoPage","previousPage","nextPage","setPageSize","canPreviousPage","canNextPage","useState","paginationElements","setPaginationElements","useEffect","Array","Math","ceil","length","fill","map","el","i","aria-label","aria-current","onClick","style","height","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","getCellProps","role","disabled","App","setData","activeTabIndex","setActiveTabIndex","tabsHeaderItems","setTabsHeaderItems","leaderboards","setLeaderboards","a","fetch","res","json","dat","sort","b","segmentName","slice","loadData","segment","index","curSegment","entries","efforts","pr","href","getFullYear","rel","target","xmlns","width","viewBox","d","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6276a7f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/strava.a72b2b3c.svg\";","import React, { useEffect, useState } from 'react'\nimport { Column, usePagination, useTable } from 'react-table'\n\nimport './App.scss'\nimport stravaLogo from './assets/strava.svg'\n\ninterface Entry {\n  pr: number\n  efforts: number\n}\n\nconst syncLink = 'http://www.strava.com/oauth/authorize?'\n  + `client_id=${process.env.REACT_APP_STRAVA_CLIENT_ID}`\n  + '&response_type=code'\n  + `&redirect_uri=${process.env.REACT_APP_API_BASE}/strava/callback`\n  + '&scope=read'\nconst baseColumns = [\n  {\n    id: 'rank',\n    Header: 'Rank'\n  },\n  {\n    id: 'name',\n    Header: 'Name',\n    accessor: 'name'\n  }\n] as Column[]\nconst prColumns = [\n  ...baseColumns,\n  {\n    id: 'pr',\n    Header: 'Time',\n    accessor: 'pr',\n    Cell: (props: any) => {\n      const date = new Date(0)\n      date.setSeconds(props.cell.value)\n      return date.toISOString().substr(11, 8)\n    }\n  }\n]\nconst effortsColumns = [\n  ...baseColumns,\n  {\n    id: 'efforts',\n    Header: 'Efforts',\n    accessor: 'efforts'\n  }\n]\n\nfunction StravaButton () {\n  return (\n    <div className=\"StravaButton\">\n      <span>Update my stats</span>\n      <img src={stravaLogo} alt=\"Strava Logo\"/>\n    </div>\n  )\n}\n\nfunction Table (props: any) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    // @ts-ignore\n    page,\n    // @ts-ignore\n    state: { pageIndex, pageSize },\n    // @ts-ignore\n    gotoPage,\n    // @ts-ignore\n    previousPage,\n    // @ts-ignore\n    nextPage,\n    // @ts-ignore\n    setPageSize,\n    // @ts-ignore\n    canPreviousPage,\n    // @ts-ignore\n    canNextPage\n  } = useTable({\n    columns: props.columns,\n    data: props.data\n  }, usePagination)\n\n  const [paginationElements, setPaginationElements] = useState([] as JSX.Element[])\n  // eslint-disable-next-line\n  useEffect(init, [])\n\n  function init () {\n    setPageSize(10)\n\n    setPaginationElements(Array(Math.ceil(props.data.length / pageSize)).fill(0).map((el: any, i: number) => (\n      <li key={i}>\n        <button className={'pagination-link' + (pageIndex === i ? ' is-current' : '')}\n                aria-label={'Page ' + (i + 1)}\n                aria-current=\"page\"\n                onClick={gotoPage(i)}>\n          {i + 1}\n        </button>\n      </li>\n    )))\n  }\n\n  return (\n    <>\n      <table style={{ height: '200px' }} className=\"table is-fullwidth\" {...getTableProps()}>\n        <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n        {page.map((row: any, i: number) => {\n          prepareRow(row)\n\n          return (\n            <tr key={i} {...row.getRowProps()}>\n              {row.cells.map((cell: any) => {\n                if (cell.column.id === 'rank') {\n                  return (\n                    <td key={cell.column.Header} {...cell.getCellProps()}>\n                      {i + 1}\n                    </td>\n                  )\n                }\n\n                return (\n                  <td key={cell.column.Header} {...cell.getCellProps()}>\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n        </tbody>\n      </table>\n\n      <nav className=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\n        <button className=\"pagination-previous\" disabled={!canPreviousPage} onClick={previousPage}>\n          Previous\n        </button>\n\n        <button className=\"pagination-next\" disabled={!canNextPage} onClick={nextPage}>\n          Next\n        </button>\n\n        <ul className=\"pagination-list\">\n          {paginationElements}\n        </ul>\n      </nav>\n    </>\n  )\n}\n\nfunction App () {\n  const [data, setData] = useState([] as any)\n  const [activeTabIndex, setActiveTabIndex] = useState(0)\n  const [tabsHeaderItems, setTabsHeaderItems] = useState([] as JSX.Element[])\n  const [leaderboards, setLeaderboards] = useState([] as JSX.Element[])\n\n  useEffect(init, [])\n  useEffect(processData, [data, activeTabIndex])\n\n  function init () {\n    async function loadData () {\n      const res = await fetch(`${process.env.REACT_APP_API_BASE}/segments`)\n      const dat = await res.json()\n\n      dat.sort((a: any, b: any) => a.segmentName > b.segmentName ? -1 : 1)\n      setData([...dat.slice(2, 4), ...dat.slice(0, 2)])\n    }\n\n    loadData()\n  }\n\n  function processData () {\n    if (!data.length) {\n      return\n    }\n\n    setTabsHeaderItems(data.map((segment: any, index: number) => {\n      return (\n        <li key={index}\n            className={activeTabIndex === index ? 'is-active' : ''}\n            onClick={() => setActiveTabIndex(index)}>\n          {/* eslint-disable-next-line*/}\n          <a>{segment.segmentName}</a>\n        </li>\n      )\n    }))\n\n    const curSegment = data[activeTabIndex]\n    setLeaderboards([\n      <div key={curSegment.id} className=\"column is-half leaderboard\">\n        <div className=\"box\">\n          <h2 className=\"subtitle\">Time</h2>\n\n          <Table columns={prColumns} data={curSegment.entries.sort((a: Entry, b: Entry) => a.efforts - b.efforts)} />\n        </div>\n      </div>,\n      <div key={curSegment.id} className=\"column is-half leaderboard\">\n        <div className=\"box\">\n          <h2 className=\"subtitle\">Efforts</h2>\n\n          <Table columns={effortsColumns} data={curSegment.entries.sort((a: Entry, b: Entry) => a.pr - b.pr)} />\n        </div>\n      </div>\n    ])\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"section home\">\n        <div className=\"overlay\"/>\n\n        <div className=\"content\">\n          <h1 className=\"title\">Parc des Buttes Chaumont</h1>\n\n          <a href={syncLink}>\n            <StravaButton />\n          </a>\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <h1 className=\"title has-text-centered\">Leaderboard</h1>\n        <br/>\n\n        <div className=\"tabs is-centered\">\n          <ul>\n            {tabsHeaderItems}\n          </ul>\n        </div>\n\n        <div className=\"columns\">\n          {leaderboards}\n        </div>\n      </section>\n\n      <footer className=\"footer has-text-grey has-background-grey-darker has-text-centered\">\n        <div>&copy; buttes-chaumont.fr {new Date().getFullYear()}</div>\n\n        <div className=\"social\">\n          <a rel=\"noreferrer noopener nofollow\" target=\"_blank\" href=\"https://www.facebook.com/buttes-chaumont.fr/\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"#7a7a7a\" d=\"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-3 7h-1.924c-.615 0-1.076.252-1.076.889v1.111h3l-.238 3h-2.762v8h-3v-8h-2v-3h2v-1.923c0-2.022 1.064-3.077 3.461-3.077h2.539v3z\"/></svg>\n          </a>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.scss'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  // @ts-ignore\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n"],"sourceRoot":""}